{"version":3,"file":"numfmt-xform.js","names":["_","require","defaultNumFormats","BaseXform","hashDefaultFormats","hash","each","dnf","id","f","parseInt","defaultFmtHash","NumFmtXform","_BaseXform","_inherits","_super","_createSuper","formatCode","_this","_classCallCheck","call","_createClass","key","get","value","render","xmlStream","model","leafNode","numFmtId","parseOpen","node","name","attributes","replace","parseText","parseClose","getDefaultFmtId","getDefaultFmtCode","module","exports"],"sources":["../../../../../lib/xlsx/xform/style/numfmt-xform.js"],"sourcesContent":["const _ = require('../../../utils/under-dash');\r\nconst defaultNumFormats = require('../../defaultnumformats');\r\n\r\nconst BaseXform = require('../base-xform');\r\n\r\nfunction hashDefaultFormats() {\r\n  const hash = {};\r\n  _.each(defaultNumFormats, (dnf, id) => {\r\n    if (dnf.f) {\r\n      hash[dnf.f] = parseInt(id, 10);\r\n    }\r\n    // at some point, add the other cultures here...\r\n  });\r\n  return hash;\r\n}\r\nconst defaultFmtHash = hashDefaultFormats();\r\n\r\n// NumFmt encapsulates translation between number format and xlsx\r\nclass NumFmtXform extends BaseXform {\r\n  constructor(id, formatCode) {\r\n    super();\r\n\r\n    this.id = id;\r\n    this.formatCode = formatCode;\r\n  }\r\n\r\n  get tag() {\r\n    return 'numFmt';\r\n  }\r\n\r\n  render(xmlStream, model) {\r\n    xmlStream.leafNode('numFmt', {numFmtId: model.id, formatCode: model.formatCode});\r\n  }\r\n\r\n  parseOpen(node) {\r\n    switch (node.name) {\r\n      case 'numFmt':\r\n        this.model = {\r\n          id: parseInt(node.attributes.numFmtId, 10),\r\n          formatCode: node.attributes.formatCode.replace(/[\\\\](.)/g, '$1'),\r\n        };\r\n        return true;\r\n      default:\r\n        return false;\r\n    }\r\n  }\r\n\r\n  parseText() {}\r\n\r\n  parseClose() {\r\n    return false;\r\n  }\r\n}\r\n\r\nNumFmtXform.getDefaultFmtId = function getDefaultFmtId(formatCode) {\r\n  return defaultFmtHash[formatCode];\r\n};\r\n\r\nNumFmtXform.getDefaultFmtCode = function getDefaultFmtCode(numFmtId) {\r\n  return defaultNumFormats[numFmtId] && defaultNumFormats[numFmtId].f;\r\n};\r\n\r\nmodule.exports = NumFmtXform;\r\n"],"mappings":";;;;;;;;;;;;;;;AAAA,IAAMA,CAAC,GAAGC,OAAO,CAAC,2BAA2B,CAAC;AAC9C,IAAMC,iBAAiB,GAAGD,OAAO,CAAC,yBAAyB,CAAC;AAE5D,IAAME,SAAS,GAAGF,OAAO,CAAC,eAAe,CAAC;AAE1C,SAASG,kBAAkBA,CAAA,EAAG;EAC5B,IAAMC,IAAI,GAAG,CAAC,CAAC;EACfL,CAAC,CAACM,IAAI,CAACJ,iBAAiB,EAAE,UAACK,GAAG,EAAEC,EAAE,EAAK;IACrC,IAAID,GAAG,CAACE,CAAC,EAAE;MACTJ,IAAI,CAACE,GAAG,CAACE,CAAC,CAAC,GAAGC,QAAQ,CAACF,EAAE,EAAE,EAAE,CAAC;IAChC;IACA;EACF,CAAC,CAAC;;EACF,OAAOH,IAAI;AACb;AACA,IAAMM,cAAc,GAAGP,kBAAkB,CAAC,CAAC;;AAE3C;AAAA,IACMQ,WAAW,0BAAAC,UAAA;EAAAC,SAAA,CAAAF,WAAA,EAAAC,UAAA;EAAA,IAAAE,MAAA,GAAAC,YAAA,CAAAJ,WAAA;EACf,SAAAA,YAAYJ,EAAE,EAAES,UAAU,EAAE;IAAA,IAAAC,KAAA;IAAAC,eAAA,OAAAP,WAAA;IAC1BM,KAAA,GAAAH,MAAA,CAAAK,IAAA;IAEAF,KAAA,CAAKV,EAAE,GAAGA,EAAE;IACZU,KAAA,CAAKD,UAAU,GAAGA,UAAU;IAAC,OAAAC,KAAA;EAC/B;EAACG,YAAA,CAAAT,WAAA;IAAAU,GAAA;IAAAC,GAAA,EAED,SAAAA,IAAA,EAAU;MACR,OAAO,QAAQ;IACjB;EAAC;IAAAD,GAAA;IAAAE,KAAA,EAED,SAAAC,OAAOC,SAAS,EAAEC,KAAK,EAAE;MACvBD,SAAS,CAACE,QAAQ,CAAC,QAAQ,EAAE;QAACC,QAAQ,EAAEF,KAAK,CAACnB,EAAE;QAAES,UAAU,EAAEU,KAAK,CAACV;MAAU,CAAC,CAAC;IAClF;EAAC;IAAAK,GAAA;IAAAE,KAAA,EAED,SAAAM,UAAUC,IAAI,EAAE;MACd,QAAQA,IAAI,CAACC,IAAI;QACf,KAAK,QAAQ;UACX,IAAI,CAACL,KAAK,GAAG;YACXnB,EAAE,EAAEE,QAAQ,CAACqB,IAAI,CAACE,UAAU,CAACJ,QAAQ,EAAE,EAAE,CAAC;YAC1CZ,UAAU,EAAEc,IAAI,CAACE,UAAU,CAAChB,UAAU,CAACiB,OAAO,CAAC,UAAU,EAAE,IAAI;UACjE,CAAC;UACD,OAAO,IAAI;QACb;UACE,OAAO,KAAK;MAChB;IACF;EAAC;IAAAZ,GAAA;IAAAE,KAAA,EAED,SAAAW,UAAA,EAAY,CAAC;EAAC;IAAAb,GAAA;IAAAE,KAAA,EAEd,SAAAY,WAAA,EAAa;MACX,OAAO,KAAK;IACd;EAAC;EAAA,OAAAxB,WAAA;AAAA,EAjCuBT,SAAS;AAoCnCS,WAAW,CAACyB,eAAe,GAAG,SAASA,eAAeA,CAACpB,UAAU,EAAE;EACjE,OAAON,cAAc,CAACM,UAAU,CAAC;AACnC,CAAC;AAEDL,WAAW,CAAC0B,iBAAiB,GAAG,SAASA,iBAAiBA,CAACT,QAAQ,EAAE;EACnE,OAAO3B,iBAAiB,CAAC2B,QAAQ,CAAC,IAAI3B,iBAAiB,CAAC2B,QAAQ,CAAC,CAACpB,CAAC;AACrE,CAAC;AAED8B,MAAM,CAACC,OAAO,GAAG5B,WAAW"}