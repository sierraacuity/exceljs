{"version":3,"file":"content-types-xform.js","names":["XmlStream","require","BaseXform","ContentTypesXform","_BaseXform","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","key","value","render","xmlStream","model","openXml","StdDocAttributes","openNode","PROPERTY_ATTRIBUTES","mediaHash","media","forEach","medium","type","imageType","extension","leafNode","Extension","ContentType","concat","PartName","worksheets","worksheet","name","id","hasSharedStrings","sharedStrings","count","tables","table","target","drawings","drawing","commentRefs","_ref","commentName","closeNode","parseOpen","parseText","parseClose","xmlns","module","exports"],"sources":["../../../../../lib/xlsx/xform/core/content-types-xform.js"],"sourcesContent":["const XmlStream = require('../../../utils/xml-stream');\r\n\r\nconst BaseXform = require('../base-xform');\r\n\r\n// used for rendering the [Content_Types].xml file\r\n// not used for parsing\r\nclass ContentTypesXform extends BaseXform {\r\n  render(xmlStream, model) {\r\n    xmlStream.openXml(XmlStream.StdDocAttributes);\r\n\r\n    xmlStream.openNode('Types', ContentTypesXform.PROPERTY_ATTRIBUTES);\r\n\r\n    const mediaHash = {};\r\n    (model.media || []).forEach(medium => {\r\n      if (medium.type === 'image') {\r\n        const imageType = medium.extension;\r\n        if (!mediaHash[imageType]) {\r\n          mediaHash[imageType] = true;\r\n          xmlStream.leafNode('Default', {Extension: imageType, ContentType: `image/${imageType}`});\r\n        }\r\n      }\r\n    });\r\n\r\n    xmlStream.leafNode('Default', {\r\n      Extension: 'rels',\r\n      ContentType: 'application/vnd.openxmlformats-package.relationships+xml',\r\n    });\r\n    xmlStream.leafNode('Default', {Extension: 'xml', ContentType: 'application/xml'});\r\n\r\n    xmlStream.leafNode('Override', {\r\n      PartName: '/xl/workbook.xml',\r\n      ContentType: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml',\r\n    });\r\n\r\n    model.worksheets.forEach(worksheet => {\r\n      const name = `/xl/worksheets/sheet${worksheet.id}.xml`;\r\n      xmlStream.leafNode('Override', {\r\n        PartName: name,\r\n        ContentType: 'application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml',\r\n      });\r\n    });\r\n\r\n    xmlStream.leafNode('Override', {\r\n      PartName: '/xl/theme/theme1.xml',\r\n      ContentType: 'application/vnd.openxmlformats-officedocument.theme+xml',\r\n    });\r\n    xmlStream.leafNode('Override', {\r\n      PartName: '/xl/styles.xml',\r\n      ContentType: 'application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml',\r\n    });\r\n\r\n    const hasSharedStrings = model.sharedStrings && model.sharedStrings.count;\r\n    if (hasSharedStrings) {\r\n      xmlStream.leafNode('Override', {\r\n        PartName: '/xl/sharedStrings.xml',\r\n        ContentType:\r\n          'application/vnd.openxmlformats-officedocument.spreadsheetml.sharedStrings+xml',\r\n      });\r\n    }\r\n\r\n    if (model.tables) {\r\n      model.tables.forEach(table => {\r\n        xmlStream.leafNode('Override', {\r\n          PartName: `/xl/tables/${table.target}`,\r\n          ContentType: 'application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml',\r\n        });\r\n      });\r\n    }\r\n\r\n    if (model.drawings) {\r\n      model.drawings.forEach(drawing => {\r\n        xmlStream.leafNode('Override', {\r\n          PartName: `/xl/drawings/${drawing.name}.xml`,\r\n          ContentType: 'application/vnd.openxmlformats-officedocument.drawing+xml',\r\n        });\r\n      });\r\n    }\r\n\r\n    if (model.commentRefs) {\r\n      xmlStream.leafNode('Default', {\r\n        Extension: 'vml',\r\n        ContentType: 'application/vnd.openxmlformats-officedocument.vmlDrawing',\r\n      });\r\n\r\n      model.commentRefs.forEach(({commentName}) => {\r\n        xmlStream.leafNode('Override', {\r\n          PartName: `/xl/${commentName}.xml`,\r\n          ContentType: 'application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml',\r\n        });\r\n      });\r\n    }\r\n\r\n    xmlStream.leafNode('Override', {\r\n      PartName: '/docProps/core.xml',\r\n      ContentType: 'application/vnd.openxmlformats-package.core-properties+xml',\r\n    });\r\n    xmlStream.leafNode('Override', {\r\n      PartName: '/docProps/app.xml',\r\n      ContentType: 'application/vnd.openxmlformats-officedocument.extended-properties+xml',\r\n    });\r\n\r\n    xmlStream.closeNode();\r\n  }\r\n\r\n  parseOpen() {\r\n    return false;\r\n  }\r\n\r\n  parseText() {}\r\n\r\n  parseClose() {\r\n    return false;\r\n  }\r\n}\r\n\r\nContentTypesXform.PROPERTY_ATTRIBUTES = {\r\n  xmlns: 'http://schemas.openxmlformats.org/package/2006/content-types',\r\n};\r\n\r\nmodule.exports = ContentTypesXform;\r\n"],"mappings":";;;;;;;;;;;;;;;AAAA,IAAMA,SAAS,GAAGC,OAAO,CAAC,2BAA2B,CAAC;AAEtD,IAAMC,SAAS,GAAGD,OAAO,CAAC,eAAe,CAAC;;AAE1C;AACA;AAAA,IACME,iBAAiB,0BAAAC,UAAA;EAAAC,SAAA,CAAAF,iBAAA,EAAAC,UAAA;EAAA,IAAAE,MAAA,GAAAC,YAAA,CAAAJ,iBAAA;EAAA,SAAAA,kBAAA;IAAAK,eAAA,OAAAL,iBAAA;IAAA,OAAAG,MAAA,CAAAG,KAAA,OAAAC,SAAA;EAAA;EAAAC,YAAA,CAAAR,iBAAA;IAAAS,GAAA;IAAAC,KAAA,EACrB,SAAAC,OAAOC,SAAS,EAAEC,KAAK,EAAE;MACvBD,SAAS,CAACE,OAAO,CAACjB,SAAS,CAACkB,gBAAgB,CAAC;MAE7CH,SAAS,CAACI,QAAQ,CAAC,OAAO,EAAEhB,iBAAiB,CAACiB,mBAAmB,CAAC;MAElE,IAAMC,SAAS,GAAG,CAAC,CAAC;MACpB,CAACL,KAAK,CAACM,KAAK,IAAI,EAAE,EAAEC,OAAO,CAAC,UAAAC,MAAM,EAAI;QACpC,IAAIA,MAAM,CAACC,IAAI,KAAK,OAAO,EAAE;UAC3B,IAAMC,SAAS,GAAGF,MAAM,CAACG,SAAS;UAClC,IAAI,CAACN,SAAS,CAACK,SAAS,CAAC,EAAE;YACzBL,SAAS,CAACK,SAAS,CAAC,GAAG,IAAI;YAC3BX,SAAS,CAACa,QAAQ,CAAC,SAAS,EAAE;cAACC,SAAS,EAAEH,SAAS;cAAEI,WAAW,WAAAC,MAAA,CAAWL,SAAS;YAAE,CAAC,CAAC;UAC1F;QACF;MACF,CAAC,CAAC;MAEFX,SAAS,CAACa,QAAQ,CAAC,SAAS,EAAE;QAC5BC,SAAS,EAAE,MAAM;QACjBC,WAAW,EAAE;MACf,CAAC,CAAC;MACFf,SAAS,CAACa,QAAQ,CAAC,SAAS,EAAE;QAACC,SAAS,EAAE,KAAK;QAAEC,WAAW,EAAE;MAAiB,CAAC,CAAC;MAEjFf,SAAS,CAACa,QAAQ,CAAC,UAAU,EAAE;QAC7BI,QAAQ,EAAE,kBAAkB;QAC5BF,WAAW,EAAE;MACf,CAAC,CAAC;MAEFd,KAAK,CAACiB,UAAU,CAACV,OAAO,CAAC,UAAAW,SAAS,EAAI;QACpC,IAAMC,IAAI,0BAAAJ,MAAA,CAA0BG,SAAS,CAACE,EAAE,SAAM;QACtDrB,SAAS,CAACa,QAAQ,CAAC,UAAU,EAAE;UAC7BI,QAAQ,EAAEG,IAAI;UACdL,WAAW,EAAE;QACf,CAAC,CAAC;MACJ,CAAC,CAAC;MAEFf,SAAS,CAACa,QAAQ,CAAC,UAAU,EAAE;QAC7BI,QAAQ,EAAE,sBAAsB;QAChCF,WAAW,EAAE;MACf,CAAC,CAAC;MACFf,SAAS,CAACa,QAAQ,CAAC,UAAU,EAAE;QAC7BI,QAAQ,EAAE,gBAAgB;QAC1BF,WAAW,EAAE;MACf,CAAC,CAAC;MAEF,IAAMO,gBAAgB,GAAGrB,KAAK,CAACsB,aAAa,IAAItB,KAAK,CAACsB,aAAa,CAACC,KAAK;MACzE,IAAIF,gBAAgB,EAAE;QACpBtB,SAAS,CAACa,QAAQ,CAAC,UAAU,EAAE;UAC7BI,QAAQ,EAAE,uBAAuB;UACjCF,WAAW,EACT;QACJ,CAAC,CAAC;MACJ;MAEA,IAAId,KAAK,CAACwB,MAAM,EAAE;QAChBxB,KAAK,CAACwB,MAAM,CAACjB,OAAO,CAAC,UAAAkB,KAAK,EAAI;UAC5B1B,SAAS,CAACa,QAAQ,CAAC,UAAU,EAAE;YAC7BI,QAAQ,gBAAAD,MAAA,CAAgBU,KAAK,CAACC,MAAM,CAAE;YACtCZ,WAAW,EAAE;UACf,CAAC,CAAC;QACJ,CAAC,CAAC;MACJ;MAEA,IAAId,KAAK,CAAC2B,QAAQ,EAAE;QAClB3B,KAAK,CAAC2B,QAAQ,CAACpB,OAAO,CAAC,UAAAqB,OAAO,EAAI;UAChC7B,SAAS,CAACa,QAAQ,CAAC,UAAU,EAAE;YAC7BI,QAAQ,kBAAAD,MAAA,CAAkBa,OAAO,CAACT,IAAI,SAAM;YAC5CL,WAAW,EAAE;UACf,CAAC,CAAC;QACJ,CAAC,CAAC;MACJ;MAEA,IAAId,KAAK,CAAC6B,WAAW,EAAE;QACrB9B,SAAS,CAACa,QAAQ,CAAC,SAAS,EAAE;UAC5BC,SAAS,EAAE,KAAK;UAChBC,WAAW,EAAE;QACf,CAAC,CAAC;QAEFd,KAAK,CAAC6B,WAAW,CAACtB,OAAO,CAAC,UAAAuB,IAAA,EAAmB;UAAA,IAAjBC,WAAW,GAAAD,IAAA,CAAXC,WAAW;UACrChC,SAAS,CAACa,QAAQ,CAAC,UAAU,EAAE;YAC7BI,QAAQ,SAAAD,MAAA,CAASgB,WAAW,SAAM;YAClCjB,WAAW,EAAE;UACf,CAAC,CAAC;QACJ,CAAC,CAAC;MACJ;MAEAf,SAAS,CAACa,QAAQ,CAAC,UAAU,EAAE;QAC7BI,QAAQ,EAAE,oBAAoB;QAC9BF,WAAW,EAAE;MACf,CAAC,CAAC;MACFf,SAAS,CAACa,QAAQ,CAAC,UAAU,EAAE;QAC7BI,QAAQ,EAAE,mBAAmB;QAC7BF,WAAW,EAAE;MACf,CAAC,CAAC;MAEFf,SAAS,CAACiC,SAAS,CAAC,CAAC;IACvB;EAAC;IAAApC,GAAA;IAAAC,KAAA,EAED,SAAAoC,UAAA,EAAY;MACV,OAAO,KAAK;IACd;EAAC;IAAArC,GAAA;IAAAC,KAAA,EAED,SAAAqC,UAAA,EAAY,CAAC;EAAC;IAAAtC,GAAA;IAAAC,KAAA,EAEd,SAAAsC,WAAA,EAAa;MACX,OAAO,KAAK;IACd;EAAC;EAAA,OAAAhD,iBAAA;AAAA,EA1G6BD,SAAS;AA6GzCC,iBAAiB,CAACiB,mBAAmB,GAAG;EACtCgC,KAAK,EAAE;AACT,CAAC;AAEDC,MAAM,CAACC,OAAO,GAAGnD,iBAAiB"}