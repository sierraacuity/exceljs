{"version":3,"file":"list-xform.js","names":["BaseXform","require","ListXform","_BaseXform","_inherits","_super","_createSuper","options","_this","_classCallCheck","call","tag","always","count","empty","$count","$","childXform","maxItems","_createClass","key","value","prepare","model","forEach","childModel","index","render","xmlStream","length","openNode","addAttribute","closeNode","leafNode","parseOpen","node","parser","name","parseText","text","parseClose","push","undefined","Error","concat","reconcile","module","exports"],"sources":["../../../../lib/xlsx/xform/list-xform.js"],"sourcesContent":["const BaseXform = require('./base-xform');\r\n\r\nclass ListXform extends BaseXform {\r\n  constructor(options) {\r\n    super();\r\n\r\n    this.tag = options.tag;\r\n    this.always = !!options.always;\r\n    this.count = options.count;\r\n    this.empty = options.empty;\r\n    this.$count = options.$count || 'count';\r\n    this.$ = options.$;\r\n    this.childXform = options.childXform;\r\n    this.maxItems = options.maxItems;\r\n  }\r\n\r\n  prepare(model, options) {\r\n    const {childXform} = this;\r\n    if (model) {\r\n      model.forEach((childModel, index) => {\r\n        options.index = index;\r\n        childXform.prepare(childModel, options);\r\n      });\r\n    }\r\n  }\r\n\r\n  render(xmlStream, model) {\r\n    if (this.always || (model && model.length)) {\r\n      xmlStream.openNode(this.tag, this.$);\r\n      if (this.count) {\r\n        xmlStream.addAttribute(this.$count, (model && model.length) || 0);\r\n      }\r\n\r\n      const {childXform} = this;\r\n      (model || []).forEach((childModel, index) => {\r\n        childXform.render(xmlStream, childModel, index);\r\n      });\r\n\r\n      xmlStream.closeNode();\r\n    } else if (this.empty) {\r\n      xmlStream.leafNode(this.tag);\r\n    }\r\n  }\r\n\r\n  parseOpen(node) {\r\n    if (this.parser) {\r\n      this.parser.parseOpen(node);\r\n      return true;\r\n    }\r\n    switch (node.name) {\r\n      case this.tag:\r\n        this.model = [];\r\n        return true;\r\n      default:\r\n        if (this.childXform.parseOpen(node)) {\r\n          this.parser = this.childXform;\r\n          return true;\r\n        }\r\n        return false;\r\n    }\r\n  }\r\n\r\n  parseText(text) {\r\n    if (this.parser) {\r\n      this.parser.parseText(text);\r\n    }\r\n  }\r\n\r\n  parseClose(name) {\r\n    if (this.parser) {\r\n      if (!this.parser.parseClose(name)) {\r\n        this.model.push(this.parser.model);\r\n        this.parser = undefined;\r\n\r\n        if (this.maxItems && this.model.length > this.maxItems) {\r\n          throw new Error(`Max ${this.childXform.tag} count (${this.maxItems}) exceeded`);\r\n        }\r\n      }\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  reconcile(model, options) {\r\n    if (model) {\r\n      const {childXform} = this;\r\n      model.forEach(childModel => {\r\n        childXform.reconcile(childModel, options);\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = ListXform;\r\n"],"mappings":"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"}