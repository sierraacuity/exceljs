{"version":3,"file":"stream-base64.js","names":["Stream","require","StreamBase64","_Stream$Duplex","_inherits","_super","_createSuper","_this","_classCallCheck","call","pipes","_createClass","key","value","write","cork","uncork","end","read","setEncoding","encoding","pause","resume","isPaused","pipe","destination","push","unpipe","filter","unshift","Error","wrap","Duplex","module","exports"],"sources":["../../../lib/utils/stream-base64.js"],"sourcesContent":["const Stream = require('readable-stream');\r\n\r\n// =============================================================================\r\n// StreamBase64 - A utility to convert to/from base64 stream\r\n// Note: does not buffer data, must be piped\r\nclass StreamBase64 extends Stream.Duplex {\r\n  constructor() {\r\n    super();\r\n\r\n    // consuming pipe streams go here\r\n    this.pipes = [];\r\n  }\r\n\r\n  // writable\r\n  // event drain - if write returns false (which it won't), indicates when safe to write again.\r\n  // finish - end() has been called\r\n  // pipe(src) - pipe() has been called on readable\r\n  // unpipe(src) - unpipe() has been called on readable\r\n  // error - duh\r\n\r\n  write(/* data, encoding */) {\r\n    return true;\r\n  }\r\n\r\n  cork() {}\r\n\r\n  uncork() {}\r\n\r\n  end(/* chunk, encoding, callback */) {}\r\n\r\n  // readable\r\n  // event readable - some data is now available\r\n  // event data - switch to flowing mode - feeds chunks to handler\r\n  // event end - no more data\r\n  // event close - optional, indicates upstream close\r\n  // event error - duh\r\n  read(/* size */) {}\r\n\r\n  setEncoding(encoding) {\r\n    // causes stream.read or stream.on('data) to return strings of encoding instead of Buffer objects\r\n    this.encoding = encoding;\r\n  }\r\n\r\n  pause() {}\r\n\r\n  resume() {}\r\n\r\n  isPaused() {}\r\n\r\n  pipe(destination) {\r\n    // add destination to pipe list & write current buffer\r\n    this.pipes.push(destination);\r\n  }\r\n\r\n  unpipe(destination) {\r\n    // remove destination from pipe list\r\n    this.pipes = this.pipes.filter(pipe => pipe !== destination);\r\n  }\r\n\r\n  unshift(/* chunk */) {\r\n    // some numpty has read some data that's not for them and they want to put it back!\r\n    // Might implement this some day\r\n    throw new Error('Not Implemented');\r\n  }\r\n\r\n  wrap(/* stream */) {\r\n    // not implemented\r\n    throw new Error('Not Implemented');\r\n  }\r\n}\r\n\r\nmodule.exports = StreamBase64;\r\n"],"mappings":";;;;;;;;;;;;;;;AAAA,IAAMA,MAAM,GAAGC,OAAO,CAAC,iBAAiB,CAAC;;AAEzC;AACA;AACA;AAAA,IACMC,YAAY,0BAAAC,cAAA;EAAAC,SAAA,CAAAF,YAAA,EAAAC,cAAA;EAAA,IAAAE,MAAA,GAAAC,YAAA,CAAAJ,YAAA;EAChB,SAAAA,aAAA,EAAc;IAAA,IAAAK,KAAA;IAAAC,eAAA,OAAAN,YAAA;IACZK,KAAA,GAAAF,MAAA,CAAAI,IAAA;;IAEA;IACAF,KAAA,CAAKG,KAAK,GAAG,EAAE;IAAC,OAAAH,KAAA;EAClB;;EAEA;EACA;EACA;EACA;EACA;EACA;EAAAI,YAAA,CAAAT,YAAA;IAAAU,GAAA;IAAAC,KAAA,EAEA,SAAAC,MAAA,CAAM;IAAA,EAAsB;MAC1B,OAAO,IAAI;IACb;EAAC;IAAAF,GAAA;IAAAC,KAAA,EAED,SAAAE,KAAA,EAAO,CAAC;EAAC;IAAAH,GAAA;IAAAC,KAAA,EAET,SAAAG,OAAA,EAAS,CAAC;EAAC;IAAAJ,GAAA;IAAAC,KAAA,EAEX,SAAAI,IAAA,CAAI,iCAAiC,CAAC;;IAEtC;IACA;IACA;IACA;IACA;IACA;EAAA;IAAAL,GAAA;IAAAC,KAAA,EACA,SAAAK,KAAA,CAAK,YAAY,CAAC;EAAC;IAAAN,GAAA;IAAAC,KAAA,EAEnB,SAAAM,YAAYC,QAAQ,EAAE;MACpB;MACA,IAAI,CAACA,QAAQ,GAAGA,QAAQ;IAC1B;EAAC;IAAAR,GAAA;IAAAC,KAAA,EAED,SAAAQ,MAAA,EAAQ,CAAC;EAAC;IAAAT,GAAA;IAAAC,KAAA,EAEV,SAAAS,OAAA,EAAS,CAAC;EAAC;IAAAV,GAAA;IAAAC,KAAA,EAEX,SAAAU,SAAA,EAAW,CAAC;EAAC;IAAAX,GAAA;IAAAC,KAAA,EAEb,SAAAW,KAAKC,WAAW,EAAE;MAChB;MACA,IAAI,CAACf,KAAK,CAACgB,IAAI,CAACD,WAAW,CAAC;IAC9B;EAAC;IAAAb,GAAA;IAAAC,KAAA,EAED,SAAAc,OAAOF,WAAW,EAAE;MAClB;MACA,IAAI,CAACf,KAAK,GAAG,IAAI,CAACA,KAAK,CAACkB,MAAM,CAAC,UAAAJ,IAAI;QAAA,OAAIA,IAAI,KAAKC,WAAW;MAAA,EAAC;IAC9D;EAAC;IAAAb,GAAA;IAAAC,KAAA,EAED,SAAAgB,QAAA,CAAQ;IAAA,EAAa;MACnB;MACA;MACA,MAAM,IAAIC,KAAK,CAAC,iBAAiB,CAAC;IACpC;EAAC;IAAAlB,GAAA;IAAAC,KAAA,EAED,SAAAkB,KAAA,CAAK;IAAA,EAAc;MACjB;MACA,MAAM,IAAID,KAAK,CAAC,iBAAiB,CAAC;IACpC;EAAC;EAAA,OAAA5B,YAAA;AAAA,EA/DwBF,MAAM,CAACgC,MAAM;AAkExCC,MAAM,CAACC,OAAO,GAAGhC,YAAY"}