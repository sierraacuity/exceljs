{"version":3,"file":"stream-buf.js","names":["_regeneratorRuntime","exports","Op","Object","prototype","hasOwn","hasOwnProperty","defineProperty","obj","key","desc","value","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","enumerable","configurable","writable","err","wrap","innerFn","outerFn","self","tryLocsList","protoGenerator","Generator","generator","create","context","Context","makeInvokeMethod","tryCatch","fn","arg","type","call","ContinueSentinel","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","method","_invoke","AsyncIterator","PromiseImpl","invoke","resolve","reject","record","result","_typeof","__await","then","unwrapped","error","previousPromise","callInvokeWithMethodAndArg","state","Error","doneResult","delegate","delegateResult","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","done","methodName","undefined","return","TypeError","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","length","i","displayName","isGeneratorFunction","genFun","ctor","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","iter","keys","val","object","reverse","pop","skipTempReset","prev","charAt","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","catch","_catch","thrown","delegateYield","asyncGeneratorStep","gen","_next","_throw","_asyncToGenerator","args","arguments","apply","_classCallCheck","instance","Constructor","_defineProperties","target","props","descriptor","_toPropertyKey","_createClass","protoProps","staticProps","_toPrimitive","String","input","hint","prim","toPrimitive","res","Number","Stream","require","utils","StringBuf","StringChunk","data","encoding","_data","_encoding","get","toBuffer","copy","targetOffset","offset","_buffer","Buffer","from","StringBufChunk","_buf","BufferChunk","ReadWriteBuf","size","buffer","alloc","iRead","iWrite","buf","read","write","chunk","Math","min","StreamBuf","options","bufSize","buffers","batch","corked","inPos","outPos","pipes","paused","inherits","Duplex","concat","map","rwBuf","_getWritableBuffer","last","full","_pipe","_this","_callee","_callee$","_context","pipe","all","_writeToBuffers","inLen","callback","_this2","_callee2","_callee2$","_context2","Function","nop","ArrayBuffer","shift","process","nextTick","emit","cork","_flush","uncork","end","_this3","writeComplete","eod","first","filter","Boolean","setEncoding","pause","resume","isPaused","destination","unpipe","unshift","module"],"sources":["../../../lib/utils/stream-buf.js"],"sourcesContent":["/* eslint-disable max-classes-per-file */\r\nconst Stream = require('readable-stream');\r\n\r\nconst utils = require('./utils');\r\nconst StringBuf = require('./string-buf');\r\n\r\n// =============================================================================\r\n// data chunks - encapsulating incoming data\r\nclass StringChunk {\r\n  constructor(data, encoding) {\r\n    this._data = data;\r\n    this._encoding = encoding;\r\n  }\r\n\r\n  get length() {\r\n    return this.toBuffer().length;\r\n  }\r\n\r\n  // copy to target buffer\r\n  copy(target, targetOffset, offset, length) {\r\n    return this.toBuffer().copy(target, targetOffset, offset, length);\r\n  }\r\n\r\n  toBuffer() {\r\n    if (!this._buffer) {\r\n      this._buffer = Buffer.from(this._data, this._encoding);\r\n    }\r\n    return this._buffer;\r\n  }\r\n}\r\n\r\nclass StringBufChunk {\r\n  constructor(data) {\r\n    this._data = data;\r\n  }\r\n\r\n  get length() {\r\n    return this._data.length;\r\n  }\r\n\r\n  // copy to target buffer\r\n  copy(target, targetOffset, offset, length) {\r\n    // eslint-disable-next-line no-underscore-dangle\r\n    return this._data._buf.copy(target, targetOffset, offset, length);\r\n  }\r\n\r\n  toBuffer() {\r\n    return this._data.toBuffer();\r\n  }\r\n}\r\n\r\nclass BufferChunk {\r\n  constructor(data) {\r\n    this._data = data;\r\n  }\r\n\r\n  get length() {\r\n    return this._data.length;\r\n  }\r\n\r\n  // copy to target buffer\r\n  copy(target, targetOffset, offset, length) {\r\n    this._data.copy(target, targetOffset, offset, length);\r\n  }\r\n\r\n  toBuffer() {\r\n    return this._data;\r\n  }\r\n}\r\n\r\n// =============================================================================\r\n// ReadWriteBuf - a single buffer supporting simple read-write\r\nclass ReadWriteBuf {\r\n  constructor(size) {\r\n    this.size = size;\r\n    // the buffer\r\n    this.buffer = Buffer.alloc(size);\r\n    // read index\r\n    this.iRead = 0;\r\n    // write index\r\n    this.iWrite = 0;\r\n  }\r\n\r\n  toBuffer() {\r\n    if (this.iRead === 0 && this.iWrite === this.size) {\r\n      return this.buffer;\r\n    }\r\n\r\n    const buf = Buffer.alloc(this.iWrite - this.iRead);\r\n    this.buffer.copy(buf, 0, this.iRead, this.iWrite);\r\n    return buf;\r\n  }\r\n\r\n  get length() {\r\n    return this.iWrite - this.iRead;\r\n  }\r\n\r\n  get eod() {\r\n    return this.iRead === this.iWrite;\r\n  }\r\n\r\n  get full() {\r\n    return this.iWrite === this.size;\r\n  }\r\n\r\n  read(size) {\r\n    let buf;\r\n    // read size bytes from buffer and return buffer\r\n    if (size === 0) {\r\n      // special case - return null if no data requested\r\n      return null;\r\n    }\r\n\r\n    if (size === undefined || size >= this.length) {\r\n      // if no size specified or size is at least what we have then return all of the bytes\r\n      buf = this.toBuffer();\r\n      this.iRead = this.iWrite;\r\n      return buf;\r\n    }\r\n\r\n    // otherwise return a chunk\r\n    buf = Buffer.alloc(size);\r\n    this.buffer.copy(buf, 0, this.iRead, size);\r\n    this.iRead += size;\r\n    return buf;\r\n  }\r\n\r\n  write(chunk, offset, length) {\r\n    // write as many bytes from data from optional source offset\r\n    // and return number of bytes written\r\n    const size = Math.min(length, this.size - this.iWrite);\r\n    chunk.copy(this.buffer, this.iWrite, offset, offset + size);\r\n    this.iWrite += size;\r\n    return size;\r\n  }\r\n}\r\n\r\n// =============================================================================\r\n// StreamBuf - a multi-purpose read-write stream\r\n//  As MemBuf - write as much data as you like. Then call toBuffer() to consolidate\r\n//  As StreamHub - pipe to multiple writables\r\n//  As readable stream - feed data into the writable part and have some other code read from it.\r\n\r\n// Note: Not sure why but StreamBuf does not like JS \"class\" sugar. It fails the\r\n// integration tests\r\nconst StreamBuf = function(options) {\r\n  options = options || {};\r\n  this.bufSize = options.bufSize || 1024 * 1024;\r\n  this.buffers = [];\r\n\r\n  // batch mode fills a buffer completely before passing the data on\r\n  // to pipes or 'readable' event listeners\r\n  this.batch = options.batch || false;\r\n\r\n  this.corked = false;\r\n  // where in the current writable buffer we're up to\r\n  this.inPos = 0;\r\n\r\n  // where in the current readable buffer we've read up to\r\n  this.outPos = 0;\r\n\r\n  // consuming pipe streams go here\r\n  this.pipes = [];\r\n\r\n  // controls emit('data')\r\n  this.paused = false;\r\n\r\n  this.encoding = null;\r\n};\r\n\r\nutils.inherits(StreamBuf, Stream.Duplex, {\r\n  toBuffer() {\r\n    switch (this.buffers.length) {\r\n      case 0:\r\n        return null;\r\n      case 1:\r\n        return this.buffers[0].toBuffer();\r\n      default:\r\n        return Buffer.concat(this.buffers.map(rwBuf => rwBuf.toBuffer()));\r\n    }\r\n  },\r\n\r\n  // writable\r\n  // event drain - if write returns false (which it won't), indicates when safe to write again.\r\n  // finish - end() has been called\r\n  // pipe(src) - pipe() has been called on readable\r\n  // unpipe(src) - unpipe() has been called on readable\r\n  // error - duh\r\n\r\n  _getWritableBuffer() {\r\n    if (this.buffers.length) {\r\n      const last = this.buffers[this.buffers.length - 1];\r\n      if (!last.full) {\r\n        return last;\r\n      }\r\n    }\r\n    const buf = new ReadWriteBuf(this.bufSize);\r\n    this.buffers.push(buf);\r\n    return buf;\r\n  },\r\n\r\n  async _pipe(chunk) {\r\n    const write = function(pipe) {\r\n      return new Promise(resolve => {\r\n        pipe.write(chunk.toBuffer(), () => {\r\n          resolve();\r\n        });\r\n      });\r\n    };\r\n    await Promise.all(this.pipes.map(write));\r\n  },\r\n  _writeToBuffers(chunk) {\r\n    let inPos = 0;\r\n    const inLen = chunk.length;\r\n    while (inPos < inLen) {\r\n      // find writable buffer\r\n      const buffer = this._getWritableBuffer();\r\n\r\n      // write some data\r\n      inPos += buffer.write(chunk, inPos, inLen - inPos);\r\n    }\r\n  },\r\n  async write(data, encoding, callback) {\r\n    if (encoding instanceof Function) {\r\n      callback = encoding;\r\n      encoding = 'utf8';\r\n    }\r\n    callback = callback || utils.nop;\r\n\r\n    // encapsulate data into a chunk\r\n    let chunk;\r\n    if (data instanceof StringBuf) {\r\n      chunk = new StringBufChunk(data);\r\n    } else if (data instanceof Buffer) {\r\n      chunk = new BufferChunk(data);\r\n    } else if (typeof data === 'string' || data instanceof String || data instanceof ArrayBuffer) {\r\n      chunk = new StringChunk(data, encoding);\r\n    } else {\r\n      throw new Error('Chunk must be one of type String, Buffer or StringBuf.');\r\n    }\r\n\r\n    // now, do something with the chunk\r\n    if (this.pipes.length) {\r\n      if (this.batch) {\r\n        this._writeToBuffers(chunk);\r\n        while (!this.corked && this.buffers.length > 1) {\r\n          this._pipe(this.buffers.shift());\r\n        }\r\n      } else if (!this.corked) {\r\n        await this._pipe(chunk);\r\n        callback();\r\n      } else {\r\n        this._writeToBuffers(chunk);\r\n        process.nextTick(callback);\r\n      }\r\n    } else {\r\n      if (!this.paused) {\r\n        this.emit('data', chunk.toBuffer());\r\n      }\r\n\r\n      this._writeToBuffers(chunk);\r\n      this.emit('readable');\r\n    }\r\n\r\n    return true;\r\n  },\r\n  cork() {\r\n    this.corked = true;\r\n  },\r\n  _flush(/* destination */) {\r\n    // if we have comsumers...\r\n    if (this.pipes.length) {\r\n      // and there's stuff not written\r\n      while (this.buffers.length) {\r\n        this._pipe(this.buffers.shift());\r\n      }\r\n    }\r\n  },\r\n  uncork() {\r\n    this.corked = false;\r\n    this._flush();\r\n  },\r\n  end(chunk, encoding, callback) {\r\n    const writeComplete = error => {\r\n      if (error) {\r\n        callback(error);\r\n      } else {\r\n        this._flush();\r\n        this.pipes.forEach(pipe => {\r\n          pipe.end();\r\n        });\r\n        this.emit('finish');\r\n      }\r\n    };\r\n    if (chunk) {\r\n      this.write(chunk, encoding, writeComplete);\r\n    } else {\r\n      writeComplete();\r\n    }\r\n  },\r\n\r\n  // readable\r\n  // event readable - some data is now available\r\n  // event data - switch to flowing mode - feeds chunks to handler\r\n  // event end - no more data\r\n  // event close - optional, indicates upstream close\r\n  // event error - duh\r\n  read(size) {\r\n    let buffers;\r\n    // read min(buffer, size || infinity)\r\n    if (size) {\r\n      buffers = [];\r\n      while (size && this.buffers.length && !this.buffers[0].eod) {\r\n        const first = this.buffers[0];\r\n        const buffer = first.read(size);\r\n        size -= buffer.length;\r\n        buffers.push(buffer);\r\n        if (first.eod && first.full) {\r\n          this.buffers.shift();\r\n        }\r\n      }\r\n      return Buffer.concat(buffers);\r\n    }\r\n\r\n    buffers = this.buffers.map(buf => buf.toBuffer()).filter(Boolean);\r\n    this.buffers = [];\r\n    return Buffer.concat(buffers);\r\n  },\r\n  setEncoding(encoding) {\r\n    // causes stream.read or stream.on('data) to return strings of encoding instead of Buffer objects\r\n    this.encoding = encoding;\r\n  },\r\n  pause() {\r\n    this.paused = true;\r\n  },\r\n  resume() {\r\n    this.paused = false;\r\n  },\r\n  isPaused() {\r\n    return !!this.paused;\r\n  },\r\n  pipe(destination) {\r\n    // add destination to pipe list & write current buffer\r\n    this.pipes.push(destination);\r\n    if (!this.paused && this.buffers.length) {\r\n      this.end();\r\n    }\r\n  },\r\n  unpipe(destination) {\r\n    // remove destination from pipe list\r\n    this.pipes = this.pipes.filter(pipe => pipe !== destination);\r\n  },\r\n  unshift(/* chunk */) {\r\n    // some numpty has read some data that's not for them and they want to put it back!\r\n    // Might implement this some day\r\n    throw new Error('Not Implemented');\r\n  },\r\n  wrap(/* stream */) {\r\n    // not implemented\r\n    throw new Error('Not Implemented');\r\n  },\r\n});\r\n\r\nmodule.exports = StreamBuf;\r\n"],"mappings":"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"}