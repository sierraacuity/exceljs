{"version":3,"file":"col-cache.js","names":["addressRegex","colCache","_dictionary","_l2nFill","_l2n","_n2l","_level","n","_fill","level","c","v","l1","l2","l3","Error","Math","floor","l2n","l","length","concat","n2l","_hash","validateAddress","value","test","decodeAddress","addr","hasCol","col","colNumber","hasRow","row","rowNumber","i","char","charCodeAt","undefined","address","$col$row","getAddress","r","decode","parts","split","tl","br","result","top","min","left","bottom","max","right","dimensions","decodeEx","groups","match","sheetName","reference","startsWith","error","_objectSpread","encodeAddress","encode","arguments","inRange","range","_range","_slicedToArray","_address","module","exports"],"sources":["../../../lib/utils/col-cache.js"],"sourcesContent":["const addressRegex = /^[A-Z]+\\d+$/;\r\n// =========================================================================\r\n// Column Letter to Number conversion\r\nconst colCache = {\r\n  _dictionary: [\r\n    'A',\r\n    'B',\r\n    'C',\r\n    'D',\r\n    'E',\r\n    'F',\r\n    'G',\r\n    'H',\r\n    'I',\r\n    'J',\r\n    'K',\r\n    'L',\r\n    'M',\r\n    'N',\r\n    'O',\r\n    'P',\r\n    'Q',\r\n    'R',\r\n    'S',\r\n    'T',\r\n    'U',\r\n    'V',\r\n    'W',\r\n    'X',\r\n    'Y',\r\n    'Z',\r\n  ],\r\n  _l2nFill: 0,\r\n  _l2n: {},\r\n  _n2l: [],\r\n  _level(n) {\r\n    if (n <= 26) {\r\n      return 1;\r\n    }\r\n    if (n <= 26 * 26) {\r\n      return 2;\r\n    }\r\n    return 3;\r\n  },\r\n  _fill(level) {\r\n    let c;\r\n    let v;\r\n    let l1;\r\n    let l2;\r\n    let l3;\r\n    let n = 1;\r\n    if (level >= 4) {\r\n      throw new Error('Out of bounds. Excel supports columns from 1 to 16384');\r\n    }\r\n    if (this._l2nFill < 1 && level >= 1) {\r\n      while (n <= 26) {\r\n        c = this._dictionary[n - 1];\r\n        this._n2l[n] = c;\r\n        this._l2n[c] = n;\r\n        n++;\r\n      }\r\n      this._l2nFill = 1;\r\n    }\r\n    if (this._l2nFill < 2 && level >= 2) {\r\n      n = 27;\r\n      while (n <= 26 + (26 * 26)) {\r\n        v = n - (26 + 1);\r\n        l1 = v % 26;\r\n        l2 = Math.floor(v / 26);\r\n        c = this._dictionary[l2] + this._dictionary[l1];\r\n        this._n2l[n] = c;\r\n        this._l2n[c] = n;\r\n        n++;\r\n      }\r\n      this._l2nFill = 2;\r\n    }\r\n    if (this._l2nFill < 3 && level >= 3) {\r\n      n = 26 + (26 * 26) + 1;\r\n      while (n <= 16384) {\r\n        v = n - ((26 * 26) + 26 + 1);\r\n        l1 = v % 26;\r\n        l2 = Math.floor(v / 26) % 26;\r\n        l3 = Math.floor(v / (26 * 26));\r\n        c = this._dictionary[l3] + this._dictionary[l2] + this._dictionary[l1];\r\n        this._n2l[n] = c;\r\n        this._l2n[c] = n;\r\n        n++;\r\n      }\r\n      this._l2nFill = 3;\r\n    }\r\n  },\r\n  l2n(l) {\r\n    if (!this._l2n[l]) {\r\n      this._fill(l.length);\r\n    }\r\n    if (!this._l2n[l]) {\r\n      throw new Error(`Out of bounds. Invalid column letter: ${l}`);\r\n    }\r\n    return this._l2n[l];\r\n  },\r\n  n2l(n) {\r\n    if (n < 1 || n > 16384) {\r\n      throw new Error(`${n} is out of bounds. Excel supports columns from 1 to 16384`);\r\n    }\r\n    if (!this._n2l[n]) {\r\n      this._fill(this._level(n));\r\n    }\r\n    return this._n2l[n];\r\n  },\r\n\r\n  // =========================================================================\r\n  // Address processing\r\n  _hash: {},\r\n\r\n  // check if value looks like an address\r\n  validateAddress(value) {\r\n    if (!addressRegex.test(value)) {\r\n      throw new Error(`Invalid Address: ${value}`);\r\n    }\r\n    return true;\r\n  },\r\n\r\n  // convert address string into structure\r\n  decodeAddress(value) {\r\n    const addr = value.length < 5 && this._hash[value];\r\n    if (addr) {\r\n      return addr;\r\n    }\r\n    let hasCol = false;\r\n    let col = '';\r\n    let colNumber = 0;\r\n    let hasRow = false;\r\n    let row = '';\r\n    let rowNumber = 0;\r\n    for (let i = 0, char; i < value.length; i++) {\r\n      char = value.charCodeAt(i);\r\n      // col should before row\r\n      if (!hasRow && char >= 65 && char <= 90) {\r\n        // 65 = 'A'.charCodeAt(0)\r\n        // 90 = 'Z'.charCodeAt(0)\r\n        hasCol = true;\r\n        col += value[i];\r\n        // colNumber starts from 1\r\n        colNumber = (colNumber * 26) + char - 64;\r\n      } else if (char >= 48 && char <= 57) {\r\n        // 48 = '0'.charCodeAt(0)\r\n        // 57 = '9'.charCodeAt(0)\r\n        hasRow = true;\r\n        row += value[i];\r\n        // rowNumber starts from 0\r\n        rowNumber = (rowNumber * 10) + char - 48;\r\n      } else if (hasRow && hasCol && char !== 36) {\r\n        // 36 = '$'.charCodeAt(0)\r\n        break;\r\n      }\r\n    }\r\n    if (!hasCol) {\r\n      colNumber = undefined;\r\n    } else if (colNumber > 16384) {\r\n      throw new Error(`Out of bounds. Invalid column letter: ${col}`);\r\n    }\r\n    if (!hasRow) {\r\n      rowNumber = undefined;\r\n    }\r\n\r\n    // in case $row$col\r\n    value = col + row;\r\n\r\n    const address = {\r\n      address: value,\r\n      col: colNumber,\r\n      row: rowNumber,\r\n      $col$row: `$${col}$${row}`,\r\n    };\r\n\r\n    // mem fix - cache only the tl 100x100 square\r\n    if (colNumber <= 100 && rowNumber <= 100) {\r\n      this._hash[value] = address;\r\n      this._hash[address.$col$row] = address;\r\n    }\r\n\r\n    return address;\r\n  },\r\n\r\n  // convert r,c into structure (if only 1 arg, assume r is address string)\r\n  getAddress(r, c) {\r\n    if (c) {\r\n      const address = this.n2l(c) + r;\r\n      return this.decodeAddress(address);\r\n    }\r\n    return this.decodeAddress(r);\r\n  },\r\n\r\n  // convert [address], [tl:br] into address structures\r\n  decode(value) {\r\n    const parts = value.split(':');\r\n    if (parts.length === 2) {\r\n      const tl = this.decodeAddress(parts[0]);\r\n      const br = this.decodeAddress(parts[1]);\r\n      const result = {\r\n        top: Math.min(tl.row, br.row),\r\n        left: Math.min(tl.col, br.col),\r\n        bottom: Math.max(tl.row, br.row),\r\n        right: Math.max(tl.col, br.col),\r\n      };\r\n      // reconstruct tl, br and dimensions\r\n      result.tl = this.n2l(result.left) + result.top;\r\n      result.br = this.n2l(result.right) + result.bottom;\r\n      result.dimensions = `${result.tl}:${result.br}`;\r\n      return result;\r\n    }\r\n    return this.decodeAddress(value);\r\n  },\r\n\r\n  // convert [sheetName!][$]col[$]row[[$]col[$]row] into address or range structures\r\n  decodeEx(value) {\r\n    const groups = value.match(/(?:(?:(?:'((?:[^']|'')*)')|([^'^ !]*))!)?(.*)/);\r\n\r\n    const sheetName = groups[1] || groups[2]; // Qouted and unqouted groups\r\n    const reference = groups[3]; // Remaining address\r\n\r\n    const parts = reference.split(':');\r\n    if (parts.length > 1) {\r\n      let tl = this.decodeAddress(parts[0]);\r\n      let br = this.decodeAddress(parts[1]);\r\n      const top = Math.min(tl.row, br.row);\r\n      const left = Math.min(tl.col, br.col);\r\n      const bottom = Math.max(tl.row, br.row);\r\n      const right = Math.max(tl.col, br.col);\r\n\r\n      tl = this.n2l(left) + top;\r\n      br = this.n2l(right) + bottom;\r\n\r\n      return {\r\n        top,\r\n        left,\r\n        bottom,\r\n        right,\r\n        sheetName,\r\n        tl: {address: tl, col: left, row: top, $col$row: `$${this.n2l(left)}$${top}`, sheetName},\r\n        br: {\r\n          address: br,\r\n          col: right,\r\n          row: bottom,\r\n          $col$row: `$${this.n2l(right)}$${bottom}`,\r\n          sheetName,\r\n        },\r\n        dimensions: `${tl}:${br}`,\r\n      };\r\n    }\r\n    if (reference.startsWith('#')) {\r\n      return sheetName ? {sheetName, error: reference} : {error: reference};\r\n    }\r\n\r\n    const address = this.decodeAddress(reference);\r\n    return sheetName ? {sheetName, ...address} : address;\r\n  },\r\n\r\n  // convert row,col into address string\r\n  encodeAddress(row, col) {\r\n    return colCache.n2l(col) + row;\r\n  },\r\n\r\n  // convert row,col into string address or t,l,b,r into range\r\n  encode() {\r\n    switch (arguments.length) {\r\n      case 2:\r\n        return colCache.encodeAddress(arguments[0], arguments[1]);\r\n      case 4:\r\n        return `${colCache.encodeAddress(arguments[0], arguments[1])}:${colCache.encodeAddress(\r\n          arguments[2],\r\n          arguments[3]\r\n        )}`;\r\n      default:\r\n        throw new Error('Can only encode with 2 or 4 arguments');\r\n    }\r\n  },\r\n\r\n  // return true if address is contained within range\r\n  inRange(range, address) {\r\n    const [left, top, , right, bottom] = range;\r\n    const [col, row] = address;\r\n    return col >= left && col <= right && row >= top && row <= bottom;\r\n  },\r\n};\r\n\r\nmodule.exports = colCache;\r\n"],"mappings":"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"}