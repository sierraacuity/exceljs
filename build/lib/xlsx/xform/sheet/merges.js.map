{"version":3,"file":"merges.js","names":["_","require","Range","colCache","Enums","Merges","_classCallCheck","merges","_createClass","key","value","add","merge","master","expandToAddress","address","range","concat","get","map","reconcile","mergeCells","rows","each","dimensions","decode","i","top","bottom","row","j","left","right","cell","cells","type","ValueType","Null","encodeAddress","Merge","tl","getMasterAddress","hash","module","exports"],"sources":["../../../../../lib/xlsx/xform/sheet/merges.js"],"sourcesContent":["const _ = require('../../../utils/under-dash');\r\n\r\nconst Range = require('../../../doc/range');\r\nconst colCache = require('../../../utils/col-cache');\r\nconst Enums = require('../../../doc/enums');\r\n\r\nclass Merges {\r\n  constructor() {\r\n    // optional mergeCells is array of ranges (like the xml)\r\n    this.merges = {};\r\n  }\r\n\r\n  add(merge) {\r\n    // merge is {address, master}\r\n    if (this.merges[merge.master]) {\r\n      this.merges[merge.master].expandToAddress(merge.address);\r\n    } else {\r\n      const range = `${merge.master}:${merge.address}`;\r\n      this.merges[merge.master] = new Range(range);\r\n    }\r\n  }\r\n\r\n  get mergeCells() {\r\n    return _.map(this.merges, merge => merge.range);\r\n  }\r\n\r\n  reconcile(mergeCells, rows) {\r\n    // reconcile merge list with merge cells\r\n    _.each(mergeCells, merge => {\r\n      const dimensions = colCache.decode(merge);\r\n      for (let i = dimensions.top; i <= dimensions.bottom; i++) {\r\n        const row = rows[i - 1];\r\n        for (let j = dimensions.left; j <= dimensions.right; j++) {\r\n          const cell = row.cells[j - 1];\r\n          if (!cell) {\r\n            // nulls are not included in document - so if master cell has no value - add a null one here\r\n            row.cells[j] = {\r\n              type: Enums.ValueType.Null,\r\n              address: colCache.encodeAddress(i, j),\r\n            };\r\n          } else if (cell.type === Enums.ValueType.Merge) {\r\n            cell.master = dimensions.tl;\r\n          }\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  getMasterAddress(address) {\r\n    // if address has been merged, return its master's address. Assumes reconcile has been called\r\n    const range = this.hash[address];\r\n    return range && range.tl;\r\n  }\r\n}\r\n\r\nmodule.exports = Merges;\r\n"],"mappings":";;;;;;;;AAAA,IAAMA,CAAC,GAAGC,OAAO,CAAC,2BAA2B,CAAC;AAE9C,IAAMC,KAAK,GAAGD,OAAO,CAAC,oBAAoB,CAAC;AAC3C,IAAME,QAAQ,GAAGF,OAAO,CAAC,0BAA0B,CAAC;AACpD,IAAMG,KAAK,GAAGH,OAAO,CAAC,oBAAoB,CAAC;AAAC,IAEtCI,MAAM;EACV,SAAAA,OAAA,EAAc;IAAAC,eAAA,OAAAD,MAAA;IACZ;IACA,IAAI,CAACE,MAAM,GAAG,CAAC,CAAC;EAClB;EAACC,YAAA,CAAAH,MAAA;IAAAI,GAAA;IAAAC,KAAA,EAED,SAAAC,IAAIC,KAAK,EAAE;MACT;MACA,IAAI,IAAI,CAACL,MAAM,CAACK,KAAK,CAACC,MAAM,CAAC,EAAE;QAC7B,IAAI,CAACN,MAAM,CAACK,KAAK,CAACC,MAAM,CAAC,CAACC,eAAe,CAACF,KAAK,CAACG,OAAO,CAAC;MAC1D,CAAC,MAAM;QACL,IAAMC,KAAK,MAAAC,MAAA,CAAML,KAAK,CAACC,MAAM,OAAAI,MAAA,CAAIL,KAAK,CAACG,OAAO,CAAE;QAChD,IAAI,CAACR,MAAM,CAACK,KAAK,CAACC,MAAM,CAAC,GAAG,IAAIX,KAAK,CAACc,KAAK,CAAC;MAC9C;IACF;EAAC;IAAAP,GAAA;IAAAS,GAAA,EAED,SAAAA,IAAA,EAAiB;MACf,OAAOlB,CAAC,CAACmB,GAAG,CAAC,IAAI,CAACZ,MAAM,EAAE,UAAAK,KAAK;QAAA,OAAIA,KAAK,CAACI,KAAK;MAAA,EAAC;IACjD;EAAC;IAAAP,GAAA;IAAAC,KAAA,EAED,SAAAU,UAAUC,UAAU,EAAEC,IAAI,EAAE;MAC1B;MACAtB,CAAC,CAACuB,IAAI,CAACF,UAAU,EAAE,UAAAT,KAAK,EAAI;QAC1B,IAAMY,UAAU,GAAGrB,QAAQ,CAACsB,MAAM,CAACb,KAAK,CAAC;QACzC,KAAK,IAAIc,CAAC,GAAGF,UAAU,CAACG,GAAG,EAAED,CAAC,IAAIF,UAAU,CAACI,MAAM,EAAEF,CAAC,EAAE,EAAE;UACxD,IAAMG,GAAG,GAAGP,IAAI,CAACI,CAAC,GAAG,CAAC,CAAC;UACvB,KAAK,IAAII,CAAC,GAAGN,UAAU,CAACO,IAAI,EAAED,CAAC,IAAIN,UAAU,CAACQ,KAAK,EAAEF,CAAC,EAAE,EAAE;YACxD,IAAMG,IAAI,GAAGJ,GAAG,CAACK,KAAK,CAACJ,CAAC,GAAG,CAAC,CAAC;YAC7B,IAAI,CAACG,IAAI,EAAE;cACT;cACAJ,GAAG,CAACK,KAAK,CAACJ,CAAC,CAAC,GAAG;gBACbK,IAAI,EAAE/B,KAAK,CAACgC,SAAS,CAACC,IAAI;gBAC1BtB,OAAO,EAAEZ,QAAQ,CAACmC,aAAa,CAACZ,CAAC,EAAEI,CAAC;cACtC,CAAC;YACH,CAAC,MAAM,IAAIG,IAAI,CAACE,IAAI,KAAK/B,KAAK,CAACgC,SAAS,CAACG,KAAK,EAAE;cAC9CN,IAAI,CAACpB,MAAM,GAAGW,UAAU,CAACgB,EAAE;YAC7B;UACF;QACF;MACF,CAAC,CAAC;IACJ;EAAC;IAAA/B,GAAA;IAAAC,KAAA,EAED,SAAA+B,iBAAiB1B,OAAO,EAAE;MACxB;MACA,IAAMC,KAAK,GAAG,IAAI,CAAC0B,IAAI,CAAC3B,OAAO,CAAC;MAChC,OAAOC,KAAK,IAAIA,KAAK,CAACwB,EAAE;IAC1B;EAAC;EAAA,OAAAnC,MAAA;AAAA;AAGHsC,MAAM,CAACC,OAAO,GAAGvC,MAAM"}